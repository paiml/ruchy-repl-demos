// Function tests for Ruchy v1.89 compatibility
println("🧪 Ruchy v1.89 Function Tests\n");

let mut total = 0;
let mut passed = 0;

println("📦 Function Definitions:");

// Basic function test
fun simple_add(a, b) { a + b }
total = total + 1; if simple_add(5, 3) == 8 { passed = passed + 1; println("✓ Basic function definition works"); } else { println("✗ Basic function failed"); }

// Lambda function test  
let multiply = fun(x, y) { x * y };
total = total + 1; if multiply(4, 7) == 28 { passed = passed + 1; println("✓ Lambda function works"); } else { println("✗ Lambda function failed"); }

// Closure test
let counter_base = 10;
let make_counter = fun() { fun(x) { counter_base + x } };
let counter = make_counter();
total = total + 1; if counter(5) == 15 { passed = passed + 1; println("✓ Closure captures variables"); } else { println("✗ Closure failed"); }

// Higher-order function test
let apply_twice = fun(f, x) { f(f(x)) };
let increment = fun(n) { n + 1 };
total = total + 1; if apply_twice(increment, 5) == 7 { passed = passed + 1; println("✓ Higher-order functions work"); } else { println("✗ Higher-order function failed"); }

// Recursive function test
fun factorial(n) {
    if n <= 1 { 1 } else { n * factorial(n - 1) }
}
total = total + 1; if factorial(5) == 120 { passed = passed + 1; println("✓ Recursive function works"); } else { println("✗ Recursive function failed"); }

println(f"\n📊 Function Test Results:");
println(f"   Tests Run: {total}");
println(f"   Passed: {passed}");
println(f"   Failed: {total - passed}");

let pass_rate = (passed * 100) / total;
println(f"   Pass Rate: {pass_rate}%");

if passed == total {
    println("✅ ALL FUNCTION TESTS PASSED");
} else {
    println("❌ Some function tests failed");
}