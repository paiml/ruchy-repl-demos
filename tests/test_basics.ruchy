// Test suite for basic REPL demos
import { assert, assert_equals, describe, it, test_report } from "./test_framework.ruchy"

describe("Basic Arithmetic Operations", || {
    it("should perform addition correctly", || {
        assert_equals(2 + 2, 4, "2 + 2 should equal 4")
        assert_equals(10 + 5, 15, "10 + 5 should equal 15")
        assert_equals(-5 + 3, -2, "-5 + 3 should equal -2")
    })
    
    it("should perform multiplication correctly", || {
        assert_equals(10 * 5, 50, "10 * 5 should equal 50")
        assert_equals(3 * -4, -12, "3 * -4 should equal -12")
        assert_equals(0 * 100, 0, "0 * 100 should equal 0")
    })
    
    it("should perform subtraction correctly", || {
        assert_equals(100 - 25, 75, "100 - 25 should equal 75")
        assert_equals(10 - 20, -10, "10 - 20 should equal -10")
    })
    
    it("should perform division correctly", || {
        assert_equals(50 / 2, 25, "50 / 2 should equal 25")
        assert_equals(100 / 4, 25, "100 / 4 should equal 25")
    })
    
    it("should perform modulo correctly", || {
        assert_equals(17 % 5, 2, "17 % 5 should equal 2")
        assert_equals(20 % 4, 0, "20 % 4 should equal 0")
    })
    
    it("should perform exponentiation correctly", || {
        assert_equals(2 ** 8, 256, "2 ** 8 should equal 256")
        assert_equals(3 ** 3, 27, "3 ** 3 should equal 27")
    })
})

describe("Variable Assignment", || {
    it("should assign and use variables", || {
        let x = 5
        assert_equals(x, 5, "Variable x should equal 5")
        
        let y = x * 2
        assert_equals(y, 10, "Variable y should equal 10")
        
        let name = "Ruchy"
        assert_equals(name, "Ruchy", "Variable name should equal 'Ruchy'")
    })
    
    it("should support mutable variables", || {
        let mut count = 0
        assert_equals(count, 0, "Initial count should be 0")
        
        count = count + 1
        assert_equals(count, 1, "Count should be 1 after increment")
        
        count = count * 2
        assert_equals(count, 2, "Count should be 2 after doubling")
    })
})

describe("String Operations", || {
    it("should concatenate strings", || {
        let greeting = "Hello"
        let name = "World"
        let result = greeting + ", " + name + "!"
        assert_equals(result, "Hello, World!", "String concatenation should work")
    })
    
    it("should get string length", || {
        let text = "Ruchy"
        assert_equals(text.len(), 5, "Length of 'Ruchy' should be 5")
    })
    
    it("should convert case", || {
        let text = "Hello"
        assert_equals(text.to_uppercase(), "HELLO", "Uppercase conversion")
        assert_equals(text.to_lowercase(), "hello", "Lowercase conversion")
    })
})

describe("Boolean Operations", || {
    it("should handle boolean literals", || {
        assert_equals(true, true, "true should equal true")
        assert_equals(false, false, "false should equal false")
        assert_equals(!true, false, "!true should equal false")
        assert_equals(!false, true, "!false should equal true")
    })
    
    it("should perform logical AND", || {
        assert_equals(true && true, true, "true && true should be true")
        assert_equals(true && false, false, "true && false should be false")
        assert_equals(false && false, false, "false && false should be false")
    })
    
    it("should perform logical OR", || {
        assert_equals(true || false, true, "true || false should be true")
        assert_equals(false || false, false, "false || false should be false")
        assert_equals(true || true, true, "true || true should be true")
    })
})

describe("Array Operations", || {
    it("should create and access arrays", || {
        let arr = [1, 2, 3, 4, 5]
        assert_equals(arr.len(), 5, "Array length should be 5")
        assert_equals(arr[0], 1, "First element should be 1")
        assert_equals(arr[4], 5, "Last element should be 5")
    })
    
    it("should sum arrays", || {
        let arr = [1, 2, 3]
        let sum = arr.sum()
        assert_equals(sum, 6, "Sum of [1,2,3] should be 6")
    })
    
    it("should work with closures", || {
        let double = |x| x * 2
        assert_equals(double(5), 10, "Closure should double input")
        
        let add = |x, y| x + y  
        assert_equals(add(3, 4), 7, "Two-param closure should add")
    })
})

describe("Conditionals", || {
    it("should handle if-else statements", || {
        let x = 10
        let result = if x > 5 { "greater" } else { "lesser" }
        assert_equals(result, "greater", "10 > 5 should return 'greater'")
        
        let y = 3
        let result2 = if y > 5 { "greater" } else { "lesser" }
        assert_equals(result2, "lesser", "3 > 5 should return 'lesser'")
    })
    
    it("should handle nested conditionals", || {
        let score = 85
        let grade = if score >= 90 {
            "A"
        } else if score >= 80 {
            "B"
        } else if score >= 70 {
            "C"
        } else {
            "F"
        }
        assert_equals(grade, "B", "Score of 85 should be grade B")
    })
})

// Run the test report
test_report()