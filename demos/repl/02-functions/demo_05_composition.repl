// Function composition patterns
fn compose<A, B, C>(f: fn(A) -> B, g: fn(B) -> C) -> fn(A) -> C {
    |x| g(f(x))
}

fn add_one(x: i32) -> i32 {
    x + 1
}

fn double(x: i32) -> i32 {
    x * 2
}

let add_then_double = compose(add_one, double)
add_then_double(5)

let double_then_add = compose(double, add_one)
double_then_add(5)

// Multiple composition
fn triple(x: i32) -> i32 {
    x * 3
}

let complex = compose(compose(add_one, double), triple)
complex(5)