// Graph traversal algorithms (BFS and DFS) in Ruchy
use std::collections::{HashMap, HashSet, VecDeque};

struct Graph {
    adjacency_list: HashMap<i32, Vec<i32>>
}

impl Graph {
    fn new() -> Self {
        Graph {
            adjacency_list: HashMap::new()
        }
    }
    
    fn add_edge(&mut self, from: i32, to: i32) {
        self.adjacency_list.entry(from).or_insert_with(Vec::new).push(to);
        self.adjacency_list.entry(to).or_insert_with(Vec::new); // Ensure node exists
    }
    
    // Breadth-First Search
    fn bfs(&self, start: i32) -> Vec<i32> {
        let mut visited = HashSet::new();
        let mut queue = VecDeque::new();
        let mut result = Vec::new();
        
        queue.push_back(start);
        visited.insert(start);
        
        while let Some(node) = queue.pop_front() {
            result.push(node);
            
            if let Some(neighbors) = self.adjacency_list.get(&node) {
                for &neighbor in neighbors {
                    if !visited.contains(&neighbor) {
                        visited.insert(neighbor);
                        queue.push_back(neighbor);
                    }
                }
            }
        }
        
        result
    }
    
    // Depth-First Search
    fn dfs(&self, start: i32) -> Vec<i32> {
        let mut visited = HashSet::new();
        let mut result = Vec::new();
        self.dfs_helper(start, &mut visited, &mut result);
        result
    }
    
    fn dfs_helper(&self, node: i32, visited: &mut HashSet<i32>, result: &mut Vec<i32>) {
        visited.insert(node);
        result.push(node);
        
        if let Some(neighbors) = self.adjacency_list.get(&node) {
            for &neighbor in neighbors {
                if !visited.contains(&neighbor) {
                    self.dfs_helper(neighbor, visited, result);
                }
            }
        }
    }
}

// Create and test graph
let mut graph = Graph::new();
graph.add_edge(0, 1);
graph.add_edge(0, 2);
graph.add_edge(1, 3);
graph.add_edge(1, 4);
graph.add_edge(2, 5);
graph.add_edge(2, 6);

println("Graph adjacency list: {:?}", graph.adjacency_list);

let bfs_result = graph.bfs(0);
println("BFS traversal from node 0: {:?}", bfs_result);

let dfs_result = graph.dfs(0);
println("DFS traversal from node 0: {:?}", dfs_result)