// Merge sort algorithm implementation in Ruchy
fn merge_sort(arr: Vec<i32>) -> Vec<i32> {
    if arr.len() <= 1 {
        return arr;
    }
    
    let mid = arr.len() / 2;
    let left = merge_sort(arr[0..mid].to_vec());
    let right = merge_sort(arr[mid..].to_vec());
    
    merge(left, right)
}

fn merge(left: Vec<i32>, right: Vec<i32>) -> Vec<i32> {
    let mut result = Vec::new();
    let mut i = 0;
    let mut j = 0;
    
    while i < left.len() && j < right.len() {
        if left[i] <= right[j] {
            result.push(left[i]);
            i += 1;
        } else {
            result.push(right[j]);
            j += 1;
        }
    }
    
    result.extend_from_slice(&left[i..]);
    result.extend_from_slice(&right[j..]);
    
    result
}

// Test merge sort
let numbers = vec![64, 34, 25, 12, 22, 11, 90]
println("Original: {:?}", numbers)

let sorted = merge_sort(numbers)
println("Sorted: {:?}", sorted)