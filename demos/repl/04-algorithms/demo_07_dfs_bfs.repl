// Depth-First Search and Breadth-First Search
use std::collections::{HashSet, VecDeque};

// DFS recursive
fn dfs(graph: &Vec<Vec<usize>>, node: usize, visited: &mut HashSet<usize>) {
    visited.insert(node);
    println!("DFS visiting: {}", node);
    
    for &neighbor in &graph[node] {
        if !visited.contains(&neighbor) {
            dfs(graph, neighbor, visited);
        }
    }
}

// BFS iterative
fn bfs(graph: &Vec<Vec<usize>>, start: usize) {
    let mut visited = HashSet::new();
    let mut queue = VecDeque::new();
    
    visited.insert(start);
    queue.push_back(start);
    
    while let Some(node) = queue.pop_front() {
        println!("BFS visiting: {}", node);
        
        for &neighbor in &graph[node] {
            if !visited.contains(&neighbor) {
                visited.insert(neighbor);
                queue.push_back(neighbor);
            }
        }
    }
}

let graph = vec![
    vec![1, 2],    // 0 -> 1, 2
    vec![0, 3],    // 1 -> 0, 3
    vec![0, 3],    // 2 -> 0, 3
    vec![1, 2],    // 3 -> 1, 2
];

let mut visited = HashSet::new();
dfs(&graph, 0, &mut visited);
println!("---");
bfs(&graph, 0)