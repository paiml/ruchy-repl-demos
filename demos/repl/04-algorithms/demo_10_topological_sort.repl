// Topological sort using DFS
use std::collections::{HashMap, HashSet};

fun topological_sort(graph<char, Vec<char>>) {
    let visited = HashSet::new();
    let stack = new();
    
    fun dfs(
        node,
        graph<char, Vec<char>>,
        visited HashSet<char>,
        stack Vec<char>
    ) {
        visited.insert(node);
        
        if let Some(neighbors) = graph.get(&node) {
            for &neighbor in neighbors {
                if !visited.contains(&neighbor) {
                    dfs(neighbor, graph, visited, stack);
                }
            }
        }
        
        stack.push(node);
    }
    
    for &node in graph.keys() {
        if !visited.contains(&node) {
            dfs(node, &graph, visited, stack);
        }
    }
    
    stack.reverse();
    stack
}

let graph = new();
graph.insert('A', vec!['C']);
graph.insert('B', vec!['C', 'D']);
graph.insert('C', vec!['E']);
graph.insert('D', vec!['F']);
graph.insert('E', vec!['F']);
graph.insert('F', vec![]);

let sorted = topological_sort(&graph);
println!("Topological order: {:?}", sorted);
sorted