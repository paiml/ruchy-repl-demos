// 0/1 Knapsack problem - Dynamic Programming
fn knapsack(weights: &[usize], values: &[i32], capacity: usize) -> i32 {
    let n = weights.len();
    let mut dp = vec![vec![0; capacity + 1]; n + 1];
    
    for i in 1..=n {
        for w in 0..=capacity {
            if weights[i-1] <= w {
                dp[i][w] = dp[i-1][w].max(
                    dp[i-1][w - weights[i-1]] + values[i-1]
                );
            } else {
                dp[i][w] = dp[i-1][w];
            }
        }
    }
    
    dp[n][capacity]
}

let weights = vec![1, 3, 4, 5];
let values = vec![1, 4, 5, 7];
let capacity = 7;

let max_value = knapsack(&weights, &values, capacity);
println!("Maximum value: {}", max_value);
max_value