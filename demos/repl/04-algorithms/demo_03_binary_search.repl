// Binary search algorithm implementation in Ruchy
fun binary_search(arr, target) {
    let mut left = 0;
    let mut right = arr.len();
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        if arr[mid] == target {
            return Some(mid);
        } else if arr[mid] < target {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    
    None
}

// Test binary search on sorted array
let sorted_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
println("Array: {:?}", sorted_numbers)

// Search for various targets
let targets = [7, 15, 2, 20]

for target in targets {
    match binary_search(&sorted_numbers, target) {
        Some(index) => println("Found {} at index {}", target, index),
        None => println("{} not found in array", target)
    }
}

// Recursive binary search version
fun binary_search_recursive(arr, target, left, right) {
    if left >= right {
        return None;
    }
    
    let mid = left + (right - left) / 2;
    
    if arr[mid] == target {
        Some(mid)
    } else if arr[mid] < target {
        binary_search_recursive(arr, target, mid + 1, right)
    } else {
        binary_search_recursive(arr, target, left, mid)
    }
}

println("\nUsing recursive version:")
match binary_search_recursive(&sorted_numbers, 11, 0, sorted_numbers.len()) {
    Some(index) => println("Found 11 at index {}", index),
    None => println("11 not found")
}