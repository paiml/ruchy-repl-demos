// Function composition examples in Ruchy

// Define simple functions
fun add_five(x) { x + 5 }
fun multiply_by_two(x) { x * 2 }
fun square(x) { x * x }

// Manual composition
let compose_manually = |x| multiply_by_two(add_five(x));
println("Manual composition (5 + 2 * x) with x=3: {}", compose_manually(3));

// Compose function helper
fun compose<A, B, C, F, G>(f, g) -> Fn(A) -> C
where
    F(A) -> B,
    G(B) -> C,
{
    move |x| g(f(x))
}

let composed_fn = compose(add_five, multiply_by_two);
println("Composed function with x=3: {}", composed_fn(3));

// Triple composition
fun compose3<A, B, C, D, F, G, H>(f, g, h) -> Fn(A) -> D
where
    F(A) -> B,
    G(B) -> C,
    H(C) -> D,
{
    move |x| h(g(f(x)))
}

let triple_composed = compose3(add_five, multiply_by_two, square);
println("Triple composition ((x + 5) * 2)^2 with x=3: {}", triple_composed(3));

// Function composition with closures
let add = |n| move |x| x + n;
let multiply = |n| move |x| x * n;

let add_three = add(3);
let multiply_by_four = multiply(4);

let composed_closure = |x| multiply_by_four(add_three(x));
println("Closure composition (x + 3) * 4 with x=5: {}", composed_closure(5));

// String processing composition
fun to_uppercase(s) { s.to_uppercase() }
fun add_brackets(s) { format!("[{}]", s) }
fun add_prefix(s) { format!("PREFIX: {}", s) }

let string_composer = compose3(to_uppercase, add_brackets, add_prefix);
let result = string_composer("hello world".to_string());
println("String composition result: {}", result);

// Practical example validation pipeline
fun validate_not_empty(s) {
    if s.is_empty() { None } else { Some(s) }
}

fun validate_length(min) -> Fn(String) {
    move |s| {
        if s.len() >= min { Some(s) } else { None }
    }
}

fun validate_contains_char(ch) -> Fn(String) {
    move |s| {
        if s.contains(ch) { Some(s) } else { None }
    }
}

// Chain validations
let validation_chain = |input| {
    validate_not_empty(input)
        .and_then(validate_length(3))
        .and_then(validate_contains_char('a'))
};

println("Validation 'cat': {:?}", validation_chain("cat".to_string()));
println("Validation 'dog': {:?}", validation_chain("dog".to_string()));
println("Validation '': {:?}", validation_chain("".to_string()))