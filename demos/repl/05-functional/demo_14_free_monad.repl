// Free monad pattern for building DSLs
Free {
    Pure(A),
    Free(Box),
}

// Example DSL for console operations
ConsoleF {
    Print(String, A),
    Read(Box<dyn FnOnce(String) -> A>),
}

type Console = Free<ConsoleF<Console>, A>;

Console {
    fun pure(value) -> Self {
        Free::Pure(value)
    }
    
    fun print(msg) -> Console<()> {
        Free::Free(Box::new(ConsoleF::Print(msg, Console::pure(()))))
    }
    
    fun read() -> Console<String> {
        Free::Free(Box::new(ConsoleF::Read(Box::new(|s| Console::pure(s)))))
    }
}

// Interpreter for the DSL
fun run_console(program) -> A {
    match program {
        Free::Pure(a) => a,
        Free::Free(f) => match *f {
            ConsoleF::Print(msg, next) => {
                println!("{}", msg);
                run_console(next)
            },
            ConsoleF::Read(cont) => {
                let input = "user input".to_string(); // Simulated
                run_console(cont(input))
            }
        }
    }
}

// Example program
let program = Console::print("Hello!".to_string());
run_console(program)