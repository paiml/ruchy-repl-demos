// Trampoline pattern for tail-call optimization
Bounce {
    Done(T),
    Call(Box<dyn FnOnce() -> Bounce>),
}

fun trampoline(bounce) -> T {
    loop {
        match bounce {
            Bounce::Done(x) => return x,
            Bounce::Call(thunk) => bounce = thunk(),
        }
    }
}

// Tail-recursive factorial using trampoline
fun factorial_trampoline(n, acc) -> Bounce<u32> {
    if n <= 1 {
        Bounce::Done(acc)
    } else {
        Bounce::Call(Box::new(move || factorial_trampoline(n - 1, n * acc)))
    }
}

// Tail-recursive sum using trampoline
fun sum_trampoline(n, acc) -> Bounce<u32> {
    if n == 0 {
        Bounce::Done(acc)
    } else {
        Bounce::Call(Box::new(move || sum_trampoline(n - 1, acc + n)))
    }
}

let result1 = trampoline(factorial_trampoline(5, 1));
println!("Trampoline factorial(5): {}", result1);

let result2 = trampoline(sum_trampoline(100, 0));
println!("Trampoline sum(1..=100): {}", result2)