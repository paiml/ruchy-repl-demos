// Monad transformers - combining monads
use std::fmt::Debug;

// Result<Option> transformer
#[derive(Debug)]
ResultOption {
    inner, E>
}

ResultOption {
    fun new(value) -> Self {
        ResultOption { inner(Some(value)) }
    }
    
    fun none() -> Self {
        ResultOption { inner(None) }
    }
    
    fun error(err) -> Self {
        ResultOption { inner(err) }
    }
    
    fun and_then(self, f) -> ResultOption
    where F(T) -> ResultOption {
        match self.inner {
            Ok(Some(val)) => f(val),
            Ok(None) => Resultnone(),
            Err(e) => Resulterror(e),
        }
    }
    
    fun map(self, f) -> ResultOption
    where F(T) -> U {
        ResultOption {
            inner.inner.map(|opt| opt.map(f))
        }
    }
}

// Example usage
let result = Resultnew(5)
    .map(|x| x * 2)
    .and_then(|x| {
        if x > 5 {
            Resultnew(x + 1)
        } else {
            Resultnone()
        }
    });

println!("Monad transformer result: {:?}", result)