// Memory and reference management in Ruchy
// Note: Ruchy handles memory management differently than Rust
// This demo shows basic reference and scope concepts

// Basic function with references
fun longest(x, y) {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

let string1 = "Hello"
let string2 = "World!"
let result = longest(string1, string2)
println("Longest string: " + result)

// Data holder example
fun create_holder(content) {
    {
        content: content,
        get_content: || content,
        get_length: || content.len()
    }
}

let text = "Hello, Ruchy!"
let holder = create_holder(text)
println("Content: " + holder.get_content())
println("Length: " + holder.get_length())

// Scope and ownership
fun demonstrate_scope() {
    let outer = "Outer scope"
    
    {
        let inner = "Inner scope"
        println("In inner scope: " + inner)
        println("Can access outer: " + outer)
    }
    
    println("Back in outer scope: " + outer)
    // inner is no longer accessible here
}

demonstrate_scope()

// Closure capturing values
fun create_counter() {
    let count = 0
    || {
        count = count + 1
        count
    }
}

let counter = create_counter()
println("Count: " + counter())
println("Count: " + counter())
println("Count: " + counter())

// Working with collections
fun process_items(items) {
    items.map(|item| item.to_uppercase())
}

let words = ["hello", "world", "ruchy"]
let uppercased = process_items(words)
println("Uppercased: " + uppercased.join(", "))

// Chaining operations
fun chain_example(data) {
    data
        .filter(|x| x > 0)
        .map(|x| x * 2)
        .fold(0, |acc, x| acc + x)
}

let numbers = [-5, -2, 0, 3, 7, 10]
let result = chain_example(numbers)
println("Chain result: " + result)

// Higher-order functions with closures
fun apply_operation(items, op) {
    items.map(op)
}

let nums = [1, 2, 3, 4, 5]
let doubled = apply_operation(nums, |x| x * 2)
let squared = apply_operation(nums, |x| x * x)

println("Doubled: " + doubled.join(", "))
println("Squared: " + squared.join(", "))