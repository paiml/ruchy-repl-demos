// Fallback chain pattern for resilience
use std::fmt::Debug;

// Fallback chain builder
FallbackChain {
    operations Option>>,
}

impl<T> FallbackChain {
    fun new() -> Self {
        FallbackChain {
            operations(),
        }
    }
    
    fun try_with(self, operation) -> Self
    where F() + 'static {
        self.operations.push(Box::new(operation));
        self
    }
    
    fun execute(self) {
        for (i, operation) in self.operations.iter().enumerate() {
            println!("Trying operation {}", i + 1);
            if let Some(result) = operation() {
                println!("Success at operation {}", i + 1);
                return Some(result);
            }
            println!("Operation {} failed, trying next...", i + 1);
        }
        println!("All operations failed");
        None
    }
    
    fun execute_or_default(self, default) -> T {
        self.execute().unwrap_or(default)
    }
}

// Example loading with fallbacks
fun load_from_env() {
    std::env::var("CONFIG").ok()
}

fun load_from_file() {
    // Simulated file read
    None // Would normally read from file
}

fun load_from_network() {
    // Simulated network fetch
    None // Would normally fetch from network
}

fun load_default() {
    Some("default_config".to_string())
}

// Use fallback chain
let config = FallbackChain::new()
    .try_with(load_from_env)
    .try_with(load_from_file)
    .try_with(load_from_network)
    .try_with(load_default)
    .execute();

match config {
    Some(cfg) => println!("Loaded configuration: {}", cfg),
    None => println!("Failed to load any configuration"),
}

// Another example source fallback
let data = FallbackChain::<Vec<i32>>::new()
    .try_with(|| {
        println!("Trying primary database...");
        None // Simulated failure
    })
    .try_with(|| {
        println!("Trying cache...");
        None // Simulated cache miss
    })
    .try_with(|| {
        println!("Trying backup database...");
        Some(vec![1, 2, 3, 4, 5])
    })
    .execute_or_default(vec![]);

println!("Retrieved data: {:?}", data)