// Validation chain pattern
#[derive(Debug)]
struct ValidationError {
    field: String,
    errors: Vec<String>,
}

struct Validator<T> {
    value: T,
    errors: Vec<ValidationError>,
}

impl<T> Validator<T> {
    fn new(value: T) -> Self {
        Validator {
            value,
            errors: Vec::new(),
        }
    }
    
    fn validate<F>(mut self, field: &str, check: F, error_msg: &str) -> Self
    where F: FnOnce(&T) -> bool {
        if !check(&self.value) {
            let error = self.errors.iter_mut()
                .find(|e| e.field == field)
                .unwrap_or_else(|| {
                    self.errors.push(ValidationError {
                        field: field.to_string(),
                        errors: Vec::new(),
                    });
                    self.errors.last_mut().unwrap()
                });
            error.errors.push(error_msg.to_string());
        }
        self
    }
    
    fn is_valid(&self) -> bool {
        self.errors.is_empty()
    }
    
    fn finish(self) -> Result<T, Vec<ValidationError>> {
        if self.errors.is_empty() {
            Ok(self.value)
        } else {
            Err(self.errors)
        }
    }
}

// Example: User registration validation
#[derive(Debug)]
struct UserRegistration {
    username: String,
    email: String,
    password: String,
    age: u8,
}

fn validate_user(user: UserRegistration) -> Result<UserRegistration, Vec<ValidationError>> {
    Validator::new(user)
        .validate("username", |u| u.username.len() >= 3, "Username must be at least 3 characters")
        .validate("username", |u| u.username.chars().all(|c| c.is_alphanumeric()), "Username must be alphanumeric")
        .validate("email", |u| u.email.contains('@'), "Email must contain @")
        .validate("email", |u| u.email.contains('.'), "Email must contain .")
        .validate("password", |u| u.password.len() >= 8, "Password must be at least 8 characters")
        .validate("password", |u| u.password.chars().any(|c| c.is_numeric()), "Password must contain a number")
        .validate("age", |u| u.age >= 18, "Must be 18 or older")
        .validate("age", |u| u.age <= 120, "Invalid age")
        .finish()
}

// Test validation
let user = UserRegistration {
    username: "ab".to_string(),
    email: "invalid-email".to_string(),
    password: "short".to_string(),
    age: 16,
};

match validate_user(user) {
    Ok(user) => println!("Valid user: {:?}", user),
    Err(errors) => {
        println!("Validation errors:");
        for error in errors {
            println!("  {}: {:?}", error.field, error.errors);
        }
    }
}