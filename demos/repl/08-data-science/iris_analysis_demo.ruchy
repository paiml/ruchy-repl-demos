// REPL Demo: Iris Dataset Analysis - The Hello World of Data Science
// Dataset: Classic Fisher's Iris dataset (150 flowers, 4 measurements)
// Skills: Basic statistics, grouping, filtering, data exploration

println("=== Iris Dataset Analysis - Data Science Fundamentals ===");

// Simulate the famous Iris dataset (normally loaded from CSV)
// In production: let iris = load_csv("datasets/iris.csv")
println("\n1. Loading the Iris Dataset:");
let iris = [
    // Setosa samples (first 5 of 50)
    {species: "setosa", sepal_length: 5.1, sepal_width: 3.5, petal_length: 1.4, petal_width: 0.2},
    {species: "setosa", sepal_length: 4.9, sepal_width: 3.0, petal_length: 1.4, petal_width: 0.2},
    {species: "setosa", sepal_length: 4.7, sepal_width: 3.2, petal_length: 1.3, petal_width: 0.2},
    {species: "setosa", sepal_length: 4.6, sepal_width: 3.1, petal_length: 1.5, petal_width: 0.2},
    {species: "setosa", sepal_length: 5.0, sepal_width: 3.6, petal_length: 1.4, petal_width: 0.2},
    
    // Versicolor samples (first 5 of 50) 
    {species: "versicolor", sepal_length: 7.0, sepal_width: 3.2, petal_length: 4.7, petal_width: 1.4},
    {species: "versicolor", sepal_length: 6.4, sepal_width: 3.2, petal_length: 4.5, petal_width: 1.5},
    {species: "versicolor", sepal_length: 6.9, sepal_width: 3.1, petal_length: 4.9, petal_width: 1.5},
    {species: "versicolor", sepal_length: 5.5, sepal_width: 2.3, petal_length: 4.0, petal_width: 1.3},
    {species: "versicolor", sepal_length: 6.5, sepal_width: 2.8, petal_length: 4.6, petal_width: 1.5},
    
    // Virginica samples (first 5 of 50)
    {species: "virginica", sepal_length: 6.3, sepal_width: 3.3, petal_length: 6.0, petal_width: 2.5},
    {species: "virginica", sepal_length: 5.8, sepal_width: 2.7, petal_length: 5.1, petal_width: 1.9},
    {species: "virginica", sepal_length: 7.1, sepal_width: 3.0, petal_length: 5.9, petal_width: 2.1},
    {species: "virginica", sepal_length: 6.3, sepal_width: 2.9, petal_length: 5.6, petal_width: 1.8},
    {species: "virginica", sepal_length: 6.5, sepal_width: 3.0, petal_length: 5.8, petal_width: 2.2}
];

println(f"Dataset loaded: {iris.len()} samples (subset of full 150-sample dataset)");
println(f"Features: sepal_length, sepal_width, petal_length, petal_width, species");

// 2. Dataset Overview - Data Science Step 1
println("\n2. Dataset Overview:");
let species_list = iris.map(|row| row.species);
let unique_species = ["setosa", "versicolor", "virginica"]; // Would use unique() function
println(f"Species in dataset: {unique_species}");
println(f"Samples per species: {iris.len() / 3} (in full dataset: 50 each)");

// 3. Basic Statistics - Every data scientist's first step
println("\n3. Basic Statistics:");
let sepal_lengths = iris.map(|row| row.sepal_length);
let avg_sepal_length = sepal_lengths.sum() / sepal_lengths.len();
let min_sepal_length = match sepal_lengths.min() { Some(x) => x, None => 0.0 };
let max_sepal_length = match sepal_lengths.max() { Some(x) => x, None => 0.0 };

println(f"Sepal Length Statistics:");
println(f"  Average: {avg_sepal_length:.2f} cm");
println(f"  Range: {min_sepal_length:.1f} - {max_sepal_length:.1f} cm");

let petal_lengths = iris.map(|row| row.petal_length);
let avg_petal_length = petal_lengths.sum() / petal_lengths.len();
println(f"Petal Length Average: {avg_petal_length:.2f} cm");

// 4. Species-specific Analysis - Grouping and Aggregation
println("\n4. Species-Specific Analysis:");

// Group by species and calculate averages
let setosa_flowers = iris.filter(|row| row.species == "setosa");
let setosa_avg_sepal = setosa_flowers.map(|row| row.sepal_length).sum() / setosa_flowers.len();
let setosa_avg_petal = setosa_flowers.map(|row| row.petal_length).sum() / setosa_flowers.len();

let versicolor_flowers = iris.filter(|row| row.species == "versicolor");
let versicolor_avg_sepal = versicolor_flowers.map(|row| row.sepal_length).sum() / versicolor_flowers.len();
let versicolor_avg_petal = versicolor_flowers.map(|row| row.petal_length).sum() / versicolor_flowers.len();

let virginica_flowers = iris.filter(|row| row.species == "virginica");
let virginica_avg_sepal = virginica_flowers.map(|row| row.sepal_length).sum() / virginica_flowers.len();
let virginica_avg_petal = virginica_flowers.map(|row| row.petal_length).sum() / virginica_flowers.len();

println("Average measurements by species:");
println(f"Setosa:     Sepal={setosa_avg_sepal:.2f}cm,     Petal={setosa_avg_petal:.2f}cm");
println(f"Versicolor: Sepal={versicolor_avg_sepal:.2f}cm, Petal={versicolor_avg_petal:.2f}cm");
println(f"Virginica:  Sepal={virginica_avg_sepal:.2f}cm,  Petal={virginica_avg_petal:.2f}cm");

// 5. Feature Engineering - Creating new insights
println("\n5. Feature Engineering:");
let analyzed_iris = iris.map(|row| {
    let petal_ratio = row.petal_length / row.petal_width;
    let sepal_ratio = row.sepal_length / row.sepal_width;
    
    {
        ...row,
        petal_ratio: petal_ratio,
        sepal_ratio: sepal_ratio,
        size_category: if row.petal_length > 4.0 { "large" } else { "small" }
    }
});

println("Sample with engineered features:");
println(f"First flower: species={analyzed_iris[0].species}, petal_ratio={analyzed_iris[0].petal_ratio:.2f}, size={analyzed_iris[0].size_category}");

// 6. Data Filtering - Finding patterns  
println("\n6. Pattern Discovery:");
let large_petals = iris.filter(|row| row.petal_length > 4.0);
let small_petals = iris.filter(|row| row.petal_length <= 4.0);

println(f"Flowers with large petals (>4cm): {large_petals.len()}");
println(f"Flowers with small petals (â‰¤4cm): {small_petals.len()}");

// Show species distribution for large vs small petals
let large_petal_species = large_petals.map(|row| row.species);
println(f"Large petal species: {large_petal_species}");

// 7. Simple Classification Rule
println("\n7. Simple Classification Rule:");
println("Classification rule: If petal_length > 2.5, then NOT setosa");

var correct_predictions = 0;
let total_predictions = iris.len();

for flower in iris {
    let prediction = if flower.petal_length > 2.5 { "not_setosa" } else { "setosa" };
    let actual = if flower.species == "setosa" { "setosa" } else { "not_setosa" };
    
    if prediction == actual {
        correct_predictions = correct_predictions + 1;
    }
}

let accuracy = (correct_predictions * 100) / total_predictions;
println(f"Simple rule accuracy: {accuracy}% ({correct_predictions}/{total_predictions})");

println("\nâœ… Iris Analysis Complete!");
println("\nðŸ“š What You Learned:");
println("â€¢ Loading and exploring datasets");
println("â€¢ Computing basic statistics (mean, min, max)");
println("â€¢ Grouping data by categories"); 
println("â€¢ Feature engineering (ratios, categories)");
println("â€¢ Pattern discovery through filtering");
println("â€¢ Simple classification rules");
println("\nðŸš€ Next Steps: Try with the full 150-sample Iris dataset!");
println("   Or explore Titanic survival analysis for real-world data cleaning!");