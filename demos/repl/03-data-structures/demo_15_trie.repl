// Trie (prefix tree) implementation
use std::collections::HashMap;

TrieNode {
    children<char, TrieNode>,
    is_end,
}

Trie {
    root,
}

Trie {
    fun new() -> Self {
        Trie {
            root {
                children(),
                is_end,
            }
        }
    }
    
    fun insert(self, word) {
        let node = self.root;
        for ch in word.chars() {
            node = node.children.entry(ch).or_insert(TrieNode {
                children(),
                is_end,
            });
        }
        node.is_end = true;
    }
    
    fun search(&self, word) {
        let node = &self.root;
        for ch in word.chars() {
            match node.children.get(&ch) {
                Some(n) => node = n,
                None => return false,
            }
        }
        node.is_end
    }
}

let trie = Trie::new();
trie.insert("apple");
trie.insert("app");
trie.search("app")