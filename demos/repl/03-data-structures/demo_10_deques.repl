// Working with double-ended queues (deques) in Ruchy
let mut deque = VecDeque::new()

// Add elements to both ends
deque.push_back(2)
deque.push_back(3)
deque.push_front(1)
deque.push_front(0)

println("Deque: {:?}", deque)

// Remove elements from both ends
let front = deque.pop_front()
let back = deque.pop_back()

println("Removed from front: {:?}", front)
println("Removed from back: {:?}", back)
println("Deque after removals: {:?}", deque)

// Access elements
if let Some(front_elem) = deque.front() {
    println("Front element: {}", front_elem)
}

if let Some(back_elem) = deque.back() {
    println("Back element: {}", back_elem)
}

// Use as a queue (FIFO)
deque.push_back(4)
deque.push_back(5)
while let Some(item) = deque.pop_front() {
    println("Processing: {}", item)
}