// Linked list implementation
List {
    Nil,
    Cons(T, Box<List>),
}

List {
    fun new() -> Self {
        List::Nil
    }
    
    fun push(self, elem) -> Self {
        List::Cons(elem, Box::new(self))
    }
}

let list = List::new()
    .push(3)
    .push(2)
    .push(1)

// List length
fun len(list) {
    match list {
        List::Nil => 0,
        List::Cons(_, tail) => 1 + len(tail)
    }
}

len(&list)