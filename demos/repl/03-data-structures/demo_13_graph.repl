// Graph representation using adjacency list
use std::collections::{HashMap, HashSet};

Graph {
    edges<String, Vec<String>>,
}

Graph {
    fun new() -> Self {
        Graph { edges() }
    }
    
    fun add_edge(self, from, to) {
        self.edges.entry(from.to_string())
            .or_insert(new())
            .push(to.to_string());
    }
    
    fun neighbors(&self, node)> {
        self.edges.get(node)
    }
}

let graph = Graph::new();
graph.add_edge("A", "B");
graph.add_edge("A", "C");
graph.add_edge("B", "D");
graph.add_edge("C", "D");

graph.neighbors("A")