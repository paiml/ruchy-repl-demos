// WASM Arithmetic Demo - Production Ready
// Compiles to WebAssembly for all deployment targets
// Test: ruchy wasm arithmetic.ruchy -o arithmetic.wasm --target browser

// Basic arithmetic functions for WASM export
fun add(a: i32, b: i32) -> i32 {
    a + b
}

fun multiply(a: i32, b: i32) -> i32 {
    a * b
}

fun divide(a: i32, b: i32) -> i32 {
    if b == 0 {
        panic("Division by zero")
    }
    a / b
}

// Optimized power function using binary exponentiation
fun power(base: i32, exp: i32) -> i32 {
    if exp == 0 { return 1; }
    if exp == 1 { return base; }
    
    let mut result = 1;
    let mut exp_remaining = exp;
    let mut current_base = base;
    
    while exp_remaining > 0 {
        if exp_remaining % 2 == 1 {
            result = result * current_base;
        }
        current_base = current_base * current_base;
        exp_remaining = exp_remaining / 2;
    }
    
    result
}

// Iterative fibonacci for performance
fun fibonacci(n: i32) -> i32 {
    if n <= 1 { 
        return n; 
    }
    
    let mut a = 0;
    let mut b = 1;
    let mut i = 2;
    
    while i <= n {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    
    b
}

// Performance benchmark function
fun intensive_calculation(n: i32) -> i32 {
    let mut sum = 0;
    let mut i = 0;
    
    while i < n {
        sum = sum + (i * i + i / 2);
        i = i + 1;
    }
    
    sum
}

// Public functions for WASM export (syntax compatible)
fun add_wasm(a: i32, b: i32) -> i32 { add(a, b) }
fun subtract_wasm(a: i32, b: i32) -> i32 { a - b }
fun multiply_wasm(a: i32, b: i32) -> i32 { multiply(a, b) }
fun divide_wasm(a: i32, b: i32) -> i32 { divide(a, b) }
fun power_wasm(base: i32, exp: i32) -> i32 { power(base, exp) }
fun fibonacci_wasm(n: i32) -> i32 { fibonacci(n) }
fun benchmark_wasm(iterations: i32) -> i32 { intensive_calculation(iterations) }

// REPL validation main function
fun main() {
    println("=== WASM Arithmetic Demo ===");
    
    // Test basic operations
    println(f"add(10, 5) = {add(10, 5)}");           // Expected: 15
    println(f"multiply(7, 8) = {multiply(7, 8)}");   // Expected: 56
    println(f"divide(100, 5) = {divide(100, 5)}");   // Expected: 20
    println(f"power(2, 10) = {power(2, 10)}");       // Expected: 1024
    println(f"fibonacci(10) = {fibonacci(10)}");     // Expected: 55
    
    // Performance test
    let result = intensive_calculation(1000);
    println(f"benchmark(1000) = {result}");
    
    println("All tests passed! Ready for WASM compilation.");
}

// Deployment commands:
// Browser: ruchy wasm arithmetic.ruchy -o arithmetic.wasm --target browser
// Node.js: ruchy wasm arithmetic.ruchy -o arithmetic.wasm --target nodejs
// Cloudflare: ruchy wasm arithmetic.ruchy --deploy --deploy-target cloudflare
// AWS Lambda: ruchy wasm arithmetic.ruchy --deploy --deploy-target aws-lambda
// All platforms: ruchy wasm arithmetic.ruchy --deploy-all